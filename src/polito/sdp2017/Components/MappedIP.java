package polito.sdp2017.Components;

/**
 * This class describes the object IP when it is mapped into the FPGA. In fact it's characterized by the object IPCore itself, 
 * an unique id for that configuration, a priority and a physical address, both of them chosen by the final user.
 */
public class MappedIP {
	private String idMappedIP;
	private IPCore ipCore;
	private int priority;
	private String physicalAddress;
	
	/**
	 * Constructor for the class MappedIp
	 * @param idMappedIP      : MappedIP identifier
	 * @param ipCore          : MappedIP core
	 * @param priority        : MappedIP priority
	 * @param physicalAddress : MappedIP physical address
	 */
	public MappedIP(String idMappedIP, IPCore ipCore, int priority, String physicalAddress) {
		this.idMappedIP = idMappedIP;
		this.ipCore = ipCore;
		this.priority = priority;
		this.physicalAddress = physicalAddress;
	}
	
	/**
	 * Getter of the id of the IPCore in the mapping 
	 * @return the idMappedIP
	 */
	public String getIdMappedIP() {
		return idMappedIP;
	}
	
	/**
	 * Setter of the id of the IPCore in the mapping
	 * @param idMappedIP : MappedIP identifier
	 */
	public void setIdMappedIP(String idMappedIP) {
		this.idMappedIP = idMappedIP;
	}
	
	/**
	 * Getter of the IPCore for MappedIP
	 * @return the IPCore object itself
	 */
	public IPCore getIpCore() {
		return ipCore;
	}
	
	/**
	 * Setter of the IPCore for MappedIP
	 * @param ipCore : MappedIP core
	 */
	public void setIpCore(IPCore ipCore) {
		this.ipCore = ipCore;
	}
	
	/**
	 * Getter of the priority for MappedIP
	 * @return the priority for that MappedIP
	 */
	public int getPriority() {
		return priority;
	}
	
	/**
	 * Setter of the priority for MappedIP
	 * @param priority : MappedIP priority
	 */
	public void setPriority(int priority) {
		this.priority = priority;
	}
	
	/**
	 * Getter of the physical address for MappedIp
	 * @return the string which contains the physical address of that MappedIP
	 */
	public String getPhysicalAddress() {
		return physicalAddress;
	}
	
	/**
	 * Setter of the physical address for MappedIp
	 * @param physicalAddress : MappedIP physical address
	 */
	public void setPhysicalAddress(String physicalAddress) {
		this.physicalAddress = physicalAddress;
	}
	
	/**
	 * Customized toString() for the class MappedIp
	 */
	@Override
	public String toString() {
		StringBuilder strb = new StringBuilder(ipCore.toString()+"\n");
		
		strb.append("id mapped IP : "+idMappedIP+"\n");
		strb.append("priority     : "+priority+"\n");
		strb.append("phys address : "+physicalAddress+"\n");
		return strb.toString();
	}
	
	/**
	 * auto-generated by Eclipse
	 * @return hash code of the object
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((idMappedIP == null) ? 0 : idMappedIP.hashCode());
		result = prime * result + ((ipCore == null) ? 0 : ipCore.hashCode());
		result = prime * result + ((physicalAddress == null) ? 0 : physicalAddress.hashCode());
		result = prime * result + priority;
		return result;
	}
	
	/**
	 * auto-generated by Eclipse
	 * @return boolean indicating if the two objects are equal.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MappedIP other = (MappedIP) obj;
		if (idMappedIP == null) {
			if (other.idMappedIP != null)
				return false;
		} else if (!idMappedIP.equals(other.idMappedIP))
			return false;
		if (ipCore == null) {
			if (other.ipCore != null)
				return false;
		} else if (!ipCore.equals(other.ipCore))
			return false;
		if (physicalAddress == null) {
			if (other.physicalAddress != null)
				return false;
		} else if (!physicalAddress.equals(other.physicalAddress))
			return false;
		if (priority != other.priority)
			return false;
		return true;
	}
}

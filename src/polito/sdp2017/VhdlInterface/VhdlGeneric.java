package polito.sdp2017.VhdlInterface;

import java.util.List;
import java.util.LinkedList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import polito.sdp2017.HardwareInterface.Generic;

/**
 * VhdlGeneric is a class representing a generic parameter in the interface of an hardware
 * block, described using VHDL. A VhdlGeneric is characterized by a name, a type and a
 * default value, which is optional.
 */
public class VhdlGeneric implements Generic {
	private String name;			//	name of the generic
	private String type;			//	type of the generic
	private String defaultValue;	//	default value, if present

	/**
	 * Accepts a string containing the text enclose within the generic clause of a VHDL entity
	 * declaration and parses it, assuming that the syntax is correct.
	 * @param txt : inner text composing the generic clause of the entity
	 * @return a List of Generic objects, whose actual type is VhdlGeneric
	 */
	static List<Generic> parseFromSource(String txt) {		
		List<Generic> list = new LinkedList<Generic>();
		String regex = "\\s*(\\w+)\\s*:\\s*(\\w+)\\s*((:=\\s*(\\w+))?)\\s*";	//	regular expression used
																				//	for parsing a single 
																				//	generic line, in the
																				//	generic clause of a VHDL
																				//	entity
		
		Pattern p = Pattern.compile(regex);
		for (String genericLine : txt.split(";")) {		//	in VHDL entities the generic clause is a list of
														//	generic parameter, separated by ";"
			genericLine = genericLine.trim();			//	delete leading and trailing spaces for simpler
														//	parsing
			Matcher m = p.matcher(genericLine);
			if (m.matches()) {
				String name = m.group(1);
				String type = m.group(2);				//	no check is performed on the type, which is
														//	supposed to be correct
				String dflValue = m.group(5);			//	TODO maybe check if it is null ??
								
				list.add(new VhdlGeneric(name,type,dflValue));
			} else {
				throw new RuntimeException("generic format is not recognised");	//	as long as the syntax is
																				//	assumed to be correct, no
																				//	exception is managed
			}
		}
		return list;
	}
	
	/**
	 * Constructor for VhdlGeneric, which simply copies the parameter passed to it, without
	 * performing any check on them.
	 * @param name : generic parameter name
	 * @param type : generic parameter type
	 */
	public VhdlGeneric(String name, String type) {
		this.name = name;
		this.type = type;
		this.defaultValue = null;
	}	
	
	/**
	 * Constructor for VhdlGeneric, which simply copies the parameter passed to it, without
	 * performing any check on them.
	 * @param name : generic parameter name
	 * @param type : generic parameter type
	 * @param defaultValue : optional defaultValue for the generic parameter
	 */
	public VhdlGeneric(String name, String type, String defaultValue) {
		this.name = name;
		this.type = type;
		this.defaultValue = defaultValue;
	}

	/**
	 * @return generic parameter name
	 */
	@Override
	public String getName() {
		return name;
	}

	/**
	 * @return generic parameter type
	 */
	@Override
	public String getType() {
		return type.toString();
	}

	/**
	 * @return generic parameter default value if present, null otherwise
	 */
	@Override
	public String getDefaultValue() {
		return defaultValue;
	}
	
	/**
	 * @return String representation of the generic parameter, using a valid VHDL syntax
	 */
	public String toString() {
		StringBuffer strb = new StringBuffer(name+" : "+type);
		if (defaultValue == null) {
			return strb.toString();
		}
		return strb.append(" := "+defaultValue).toString();
	}

	/**
	 * auto-generated by Eclipse
	 * @return hash code of the object
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((defaultValue == null) ? 0 : defaultValue.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		return result;
	}

	/**
	 * auto-generated by Eclipse
	 * @return boolean indicating if the two objects are equal.
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		VhdlGeneric other = (VhdlGeneric) obj;
		if (defaultValue == null) {
			if (other.defaultValue != null)
				return false;
		} else if (!defaultValue.equals(other.defaultValue))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (type == null) {
			if (other.type != null)
				return false;
		} else if (!type.equals(other.type))
			return false;
		return true;
	}
}
